#!/usr/bin/env node
var Chimp    = require('../lib/chimp.js'),
    minimist = require('minimist'),
    freeport = require('freeport'),
    log      = require('../lib/log');

var argv = minimist(process.argv, {
  'default': {
    'browser': 'chrome',
    'platform': 'ANY',
    'name': '',
    'debug': false,
    'host': 'localhost',
    'path': 'features',
    'user': '',
    'key': '',
    'log': 'info',
    'snippets': true,
    'format': 'pretty',
    'tags': '~@ignore',
    'watchTags': '@dev,@watch',
    'timeoutsAsyncScript': 10000,
    'waitForTimeout': 10000,
    'screenshotsOnError': null,
    'screenshotsPath': '.',
    'serverHost': 'localhost',
    'server': false,
    'noSessionReuse': false,
    'simianHost': 'api.simian.io/v1.0/result',
    'simianAccessToken': false
  },
  'boolean': true
});

if (argv.deviceName) {
  argv.browser = '';
}

if (argv.screenshotsOnError === null) {
  // For Chrome taking screenshots will focus the browser (haven't tested it with other browsers).
  // For this reason we only enable screenshots for phantomjs by default.
  // Because in phantomjs you don't get visual feedback from the browser directly when you develop.
  argv.screenshotsOnError = (argv.browser === 'phantomjs');
}

try {
  if (!argv.port) {
    freeport(function (error, port) {
      if (error) {
        throw error;
      }
      argv.port = port;
      startChimp(argv);
    });
  } else {
    startChimp(argv)
  }

} catch (ex) {
  process.stderr.write(ex.stack + '\n');
  process.exit(2);
}

function startChimp (options) {
  var chimp = new Chimp(options);
  chimp.init(function (err) {
    if (err) {
      log.error('Error in chimp init', err);
    }
    process.exit(err ? 2 : 0);
  });
}
