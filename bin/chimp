#!/usr/bin/env node
var Chimp    = require('../lib/chimp.js'),
    minimist = require('minimist'),
    freeport = require('freeport'),
    exit     = require('exit'),
    log      = require('../lib/log'),
    fs       = require('fs');
    _        = require('underscore');
    path     = require('path');

var argv = minimist(process.argv, {
  'default': getOptions(),
  'boolean': true
});

if (argv.host && (argv.host.indexOf('sauce') !== -1 || argv.host.indexOf('browserstack') !== -1)) {
  argv.noSessionReuse = true;
}

if (argv.deviceName) {
  argv.browser = '';
}

try {
  if (!argv.port) {
    freeport(function (error, port) {
      if (error) {
        throw error;
      }
      argv.port = port;
      startChimp(argv);
    });
  } else {
    startChimp(argv)
  }

} catch (ex) {
  process.stderr.write(ex.stack + '\n');
  exit(2);
}

function startChimp (options) {
  var chimp = new Chimp(options);
  chimp.init(function (err) {
    if (err) {
      log.error(err);
      log.debug('Error in chimp init', err);
    }
    exit(err ? 2 : 0);
  });
}

function getOptions() {

  var userOptionsFile;
  if(process.argv[2] && process.argv[2].match(/chimp\.json$/)) {
    userOptionsFile = path.resolve(process.env.PWD, process.argv[2]);
    process.argv.splice(2, 1);
    if (!fs.existsSync(userOptionsFile)) {
      log.error(('[chimp] Could not find ' + process.argv[2]).red);
      process.exit(1);
    }
  } else {
    userOptionsFile = path.resolve(process.env.PWD, 'chimp.json');
  }

  var userOptions = {};
  if (fs.existsSync(userOptionsFile)) {
    userOptions = require(userOptionsFile);
    log.debug('[chimp] loaded chimp.json');
  }
  var defaultOptions = require(path.resolve(__dirname, 'default.json'));
  return _.defaults(userOptions, defaultOptions);
}
